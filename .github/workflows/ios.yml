name: 'Compare Code Coverage'

# This makes the workflow reusable. It can be triggered from other workflows.
on:
  workflow_call:
    inputs:
      # The first branch to compare. Required input.
      branch_a:
        description: 'The name of the first branch to compare.'
        required: true
        type: string
      # The second branch to compare. Required input.
      branch_b:
        description: 'The name of the second branch to compare.'
        required: true
        type: string
    outputs:
      # The code coverage percentage for branch A.
      coverage_branch_a:
        description: 'The code coverage percentage for branch A.'
        value: ${{ jobs.compare_coverage.outputs.coverage_a }}
      # The code coverage percentage for branch B.
      coverage_branch_b:
        description: 'The code coverage percentage for branch B.'
        value: ${{ jobs.compare_coverage.outputs.coverage_b }}

  workflow_dispatch:
    inputs:
      branch_a:
        description: 'The name of the first branch to compare.'
        required: true
        type: string
        default: 'master'
      branch_b:
        description: 'The name of the second branch to compare.'
        required: true
        type: string
        default: 'master'

jobs:
  
  compare_coverage:
    runs-on: macos-latest
    
    env:
      applicationName: Werewolf

    # Define job outputs which will be passed up to the workflow outputs.
    outputs:
      coverage_a: ${{ steps.get_coverage_a.outputs.coverage_a }}
      coverage_b: ${{ steps.get_coverage_b.outputs.coverage_b }}

    timeout-minutes: 45

    steps:
 
      - name: Checkout branch 1 - "${{ inputs.branch_a }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_a }}
          
      - name: Run tests with coverage for branch 1 - "${{ inputs.branch_a }}"
        id: run_tests_a
        run: |
          REPORTS_PATH="$(pwd)/test-reports"
          mkdir -p "$REPORTS_PATH"
          
          xcodebuild test \
            -workspace WerewolfWorkspace.xcworkspace \
            -scheme Werewolf \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            -resultBundlePath "$REPORTS_PATH/TestResults_${{ inputs.branch_a }}.xcresult" \
            -enableCodeCoverage YES \
            -quiet
          
          echo "REPORTS_PATH=$REPORTS_PATH" >> $GITHUB_OUTPUT
      - name: Compute code coverage for branch 1 - "${{ inputs.branch_a }}"
        id: get_coverage_a
        run: |
          RESULTS_PATH="${{ steps.run_tests_a.outputs.REPORTS_PATH }}"
          echo "RESULTS_PATH=$RESULTS_PATH" >> $GITHUB_OUTPUT
          RESULT_BUNDLE=$(find "$RESULTS_PATH" -name "*.xcresult" | head -n 1)
          echo "RESULT_BUNDLE=$RESULT_BUNDLE" >> $GITHUB_OUTPUT
          echo "Using result bundle: $RESULT_BUNDLE"
          COVERAGE_PERCENTAGE=$(xcrun xccov view --report "$RESULT_BUNDLE" | grep '${{ env.applicationName }}' | awk '{print $2}')
          echo "Total coverage: $COVERAGE_PERCENTAGE"
          echo "coverage_a=$COVERAGE_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "============================="
          echo "Contents of current directory"
          ls -al
          echo "============================="
          echo "============================="
          echo "Contents of ${{ steps.run_tests_a.outputs.REPORTS_PATH }} directory"
          ls -al "${{ steps.run_tests_a.outputs.REPORTS_PATH }}"
          echo "============================="          
                
      - name: Upload Results Bundle for branch 1 - "${{ inputs.branch_a }}"
        id: xcresult_a
        uses: actions/upload-artifact@v4
        with:
          name: XCResult Branch 1
          path: ${{ steps.get_coverage_a.outputs.RESULT_BUNDLE }}

      - name: Checkout branch 2 - "${{ inputs.branch_b }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_b }}

      - name: Run tests with coverage for branch 2 - "${{ inputs.branch_b }}"
        id: run_tests_b
        run: |
          REPORTS_PATH="$(pwd)/test-reports"
          mkdir -p "$REPORTS_PATH"
          
          xcodebuild test \
            -workspace WerewolfWorkspace.xcworkspace \
            -scheme Werewolf \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            -resultBundlePath "$REPORTS_PATH/TestResults_${{ inputs.branch_b }}.xcresult" \
            -enableCodeCoverage YES \
            -quiet
          
          echo "REPORTS_PATH=$REPORTS_PATH" >> $GITHUB_OUTPUT

      - name: Compute code coverage for branch 2 - "${{ inputs.branch_b }}"
        id: get_coverage_b
        run: |
          RESULTS_PATH="${{ steps.run_tests_b.outputs.REPORTS_PATH }}"
          echo "RESULTS_PATH=$RESULTS_PATH" >> $GITHUB_OUTPUT
          RESULT_BUNDLE=$(find "$RESULTS_PATH" -name "*.xcresult" | head -n 1)
          echo "RESULT_BUNDLE=$RESULT_BUNDLE" >> $GITHUB_OUTPUT
          echo "Using result bundle: $RESULT_BUNDLE"
          COVERAGE_PERCENTAGE=$(xcrun xccov view --report "$RESULT_BUNDLE" | grep '${{ env.applicationName }}' | awk '{print $2}')
          echo "Total coverage: $COVERAGE_PERCENTAGE"
          echo "coverage_b=$COVERAGE_PERCENTAGE" >> $GITHUB_OUTPUT
      - name: Upload Results Bundle for branch 2 - "${{ inputs.branch_b }}"
        id: xcresult_b
        uses: actions/upload-artifact@v4
        with:
          name: XCResult Branch 2
          path: ${{ steps.get_coverage_b.outputs.RESULT_BUNDLE }}

      - name: Display Coverage Comparison
        run: |
          echo "----------------------------------------------------"
          echo "Code Coverage Comparison:"
          echo "Branch ${{ inputs.branch_a }}: ${{ steps.get_coverage_a.outputs.coverage_a }}%"
          echo "Branch ${{ inputs.branch_b }}: ${{ steps.get_coverage_b.outputs.coverage_b }}%"
          echo "----------------------------------------------------"
      - name: Write coverage summary to workflow run summary
        run: |
          echo "## Code Coverage Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ inputs.branch_a }} | ${{ steps.get_coverage_a.outputs.coverage_a }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ inputs.branch_b }} | ${{ steps.get_coverage_b.outputs.coverage_b }} |" >> $GITHUB_STEP_SUMMARY
